오버라이딩(overriding)
- 슈퍼클래스가 사용하고 있는 멤버와 동일한 이름의 멤버를 만들 수 없다
    - 오버라이딩을 통해 슈퍼클래스가 가지고 있는 함수를 재정의 가능
    - 재정의 시 함수 맨 앞에 override 키워드를 적어준다
- 재정의
    - 재선언과 동일
    - 이전의 정의를 번복하고 새롭게 정의
    -> 이전것을 덮어쓴다

open class Warrior1(var name : String, var power : Int, var type : String) {
    fun attack(){
        println("공격")
    }
}
class DefenseWarrior1(name: String, power : Int) : Warrior1(name, power, "고블린") { // Warrior를 만들어서 자식클래스의 독자적 기능과 합치겠다
    fun defense() {
        println("방어")
    }
    override fun attack() {
        // override로 수퍼클래스가 가지고 있는 함수 재정의 가능
        println("간단한 코드 + 공격")
    }
}

오버로딩(overloading)
- 동일한 함수를 복수개 만드는 것은 불가능
    -> 복수개 있는 경우 어떤 것을 사용자가 사용하기 원했는지를 알 수 없기 때문
fun sum(a: Int, b : Int): Int {return a+b}
fun sum(a: Int): Int {return a+10}

sum(1,2)
- 어떤걸 사용자가 사용하기를 원했는지 알 수 있다면 동일한 이름의 함수를 복수개 만들 수 있다
    - 함수가 받는 인자가 다른 경우
    fun sum(a: Int, b : Int): Int {return a+b}
    fun sum(a: Int): Int {return a+10}
    - 함수 리턴 타입이 다른 경우 -> 오버로딩 불가
    fun sum(a: Int, b : Int): Int {return a+b}
    fun sum(a: Int, b : Int): String {return a+10}
sum(10,20)
sum(10,20)
val a : Int = sum(10,10) // 의도적으로 이부분에서 에러를 발생시키고 싶다
val b : String = sum(20,20)