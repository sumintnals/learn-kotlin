고차함수(High-order function)
- 어떤 언어는 지원하지 않는 경우도 있음
- 함수를 인자로 받고 결과 값으로 내보낼 수 있음(일급시민: 함수를 인자값으로 받고 결과 값으로 내보낼 수 있음. 람다와 고차함수가 여기 해당)
- 함수 타입 표시 방법
    - 기존 함수
    fun function1 (number1 : Int, number2 : Int) -> Int = {}
    fun function3 (number1 : Int, number2 : Int) -> Int = {}
                   // 인자값 타입 표시
    - 고차 함수
    - (파라미터의 자료형1, 파라미터의 자료형2) -> 결과의 자료형
    fun function2 (function : (Int, Int) -> Int){
                   // 함수가 받는 인자의 형태, 내보내는 함수의 형태
            함수내용
            function1, 3 모두 인자로 받을 수 있다(인자 타입과 결과 타입이 같으면 ㅇㅋ)
    }
- 고차함수 호출 방법
    - function(100 ,100) -> 일반적인 함수 호출 방법
    - function2(::function1) 인자로 함수를 받겠다

람다(Lambda)
- 람다함수는 그 자체로 고차함수이기 때문에 별도의 연산자 없이 변수에 담을 수 있음
- 람다함수에서는 return을 사용할 수 없고 마지막 라인이 리턴이 된다

1. 풀 버전
val function3 : (String) -> Unit = { str:String -> 함수내용} 함수는 잎의 타입과 본문 타입이 똑같아야 함
var number1 : Int = 10과 마찬가지로 초기화를 해야 함(본문 작성)

2. 축약 버전
3. 파라미터가 없는 람다
4. 파라미터가 한 개인 경우 it 사용
val function4 : (String) -> Unit = { it -> 함수내용} // 알아서 이름 지어준다.