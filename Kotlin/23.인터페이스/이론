객체지향 프로그래밍
- 클래스, 상속, 인터페이스

인터페이스(interface)
    interface 이름 {
        변수1
        변수2
        기능이름1
        기능이름2
    }
-> 구현 부분이 없다(body가 없다)

- 규약(프로토콜) -> 의사소통을 하기 위해 생긴 것
    - 인터페이스의 abstract 부분을 구현하면 해당 타입으로 봐주겠다

- Interface
    - 의사소통 창구
    - 인터페이스를 보고 인터페이스를 구현한 클래스의 객체와 의사소통 할 수 있다.
        -> 이를 가능하게 하기 위해 생긴 특징이 규약
    - 의사소통 할 수 있다-> 사용 가능한
    - val backDosanTiger = BackDosanTiger()
    backDosanTiger.bite()
    backDosanTiger.goToBox()
    -> 인터페이스를 구현했기 때문에 클래스 안에 인터페이스의 기능을 수행할 수 있다는 것을 알고 있음

특징
- 협업(기능 구현에 집중, 클래스 활용에 집중 ... 자주 사용하진 않지만)
- 확장 -> 다중 상속, 구현 가능하다(하지만 처음 배울때는 비추...)